#version 330 core
in vec2 frag_uv;
in vec3 normal;
in vec3 position;

uniform vec3 camPos;
uniform vec3 light_pos[1];
uniform float spec_Coef[1];
uniform float shine[1];

uniform mat4 model;
uniform sampler2D sampler;
	
out vec3 color;

void main()
{
	vec3 total = vec3(0,0,0);
	vec3 specTotal = vec3(0, 0, 0);
	vec3 norm = normalize(mat3(model) * normal);

for(int i =0; i < 1; i++)
{
	vec3 dir = normalize(light_pos[i] - position);
	
	float d = dot(norm, dir);
      
   total += max(d, 0.0);
   
   if(d > 0){
    vec3 reflection = reflect(dir, norm);
   	vec3 myPos = normalize(camPos - position);
    float sf = dot(reflection, myPos);
   	specTotal += spec_Coef[i] * (pow(sf,shine[i]));
  }
}

	color =  (0.3 + specTotal + total)  * texture(sampler, frag_uv).rgb;
}